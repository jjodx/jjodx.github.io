ggplot(PlotSig, aes(x=Xm,y = Ym,fill=Xm)) +
geom_boxplot(coef=1e30)+
geom_point(aes(x=Xm,y=Ym,fill = Xm), size = 2, shape = 21, position = position_jitterdodge()) +
scale_fill_manual(values=c('#999999','#E69F00'),guide=FALSE)+
scale_x_discrete(labels=c("1" = "Med.Split","2" = "Corr"))+
theme(axis.title.x=element_blank(),axis.title.y=element_blank())+
ggtitle("average t-value when significant");
library(ggplot2)
n=16;
mean = 0;
deltamean=1;
sd=.1;
output <- list()
link = c(0, 0.1, 0.7)
plot_Pval = list()
plot_Tval = list()
plot_box = list()
for (i in 1:1) {
for (k in 1:10) {
x <- rnorm(n, mean, sd)
y <- rnorm(n, mean, sd)
SL = link[i]
y <- y+SL*x
M <- median(x)
res <- cor.test(x,y,method = "pearson")
output$Cor=c(output$Cor,res$p.value);
output$Rstat = c(output$Rstat,res$statistic);
output$Rsig=c(output$Rsig,as.numeric(res$p.value<0.05))
output$R_only_sig=abs(output$Rstat[output$Rsig==1])
output$R_only_sig_check=output$Cor[output$Rsig==1]
A = y[x<M]
B= y[x>=M]
TT=t.test(A,B,paired=FALSE)
output$Tp=c(output$Tp,TT$p.value)
output$Tstat=c(output$Tstat,TT$statistic)
output$Tsig=c(output$Tsig,as.numeric(TT$p.value<0.05))
output$T_only_sig=abs(output$Tstat[output$Tsig==1])
output$T_only_sig_check=output$Tp[output$Tsig==1]
}
dat <- data.frame(Corp = output$Cor,
Ttp = output$Tp,
CorT = output$Rstat,
TtT = output$Tstat,
Tsig = as.factor(output$Tsig),
Rsig = as.factor(output$Rsig));
p <- ggplot(dat, aes(x=Corp, y=Ttp)) +
geom_point(shape=1) +    # Use hollow circles
#geom_smooth(method=lm,se=FALSE) +   # Add linear regression line
geom_abline(intercept = 0, slope = 1, colour='red', size=1)+
xlab("p-value correlation") +
ylab("p-value Ttes") +
ggtitle("p-values") +
theme(aspect.ratio=1)+
xlim(0, 1)+
ylim(0, 1)+
geom_hline(yintercept=0.05, color='green', size=1)+
geom_vline(xintercept=0.05, color='green', size=1);
#  (by default includes 95% confidence region)
plot_Pval[[i]] <-p;
p <-ggplot(dat, aes(x=abs(CorT), y=abs(TtT))) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm,se=FALSE, size=1) +   # Add linear regression line
geom_abline(intercept = 0, slope = 1, colour='red', size=1)+
theme(aspect.ratio=1)+
xlab("t-value for the correlation") +
ylab("t-value for median split")+
ggtitle("t-statistics");
plot_Tval[[i]] <-p;
l <- list(output$T_only_sig, output$R_only_sig);
OnlySig <- data.frame(lapply(l, `length<-`, max(lengths(l))))
colnames (OnlySig) <- c("T", "R")
Xmat=as.factor(c(rep(1,length(OnlySig$T)),rep(2,length(OnlySig$R))))
Ymat <- c(OnlySig$T,OnlySig$R);
M <- tapply(Ymat, Xmat, mean)
PlotSig <- data.frame(Xm=Xmat,Ym=Ymat)
p <- ggplot(PlotSig, aes(x=Xm,y = Ym,fill=Xm)) +
geom_boxplot(coef=1e30)+
geom_point(aes(x=Xm,y=Ym,fill = Xm), size = 2, shape = 21, position = position_jitterdodge()) +
scale_fill_manual(values=c('#999999','#E69F00'),guide=FALSE)+
scale_x_discrete(labels=c("1" = "Med.Split","2" = "Corr"))+
theme(axis.title.x=element_blank(),axis.title.y=element_blank())+
ggtitle("average t-value when significant");
plot_box[[i]] <-p;
}
multiplot(plot_box)
library(ggplot2)
n=16;
mean = 0;
deltamean=1;
sd=.1;
output <- list()
link = c(0, 0.1, 0.7)
plot_Pval = list()
plot_Tval = list()
plot_box = list()
for (i in 1:1) {
for (k in 1:10) {
x <- rnorm(n, mean, sd)
y <- rnorm(n, mean, sd)
SL = link[i]
y <- y+SL*x
M <- median(x)
res <- cor.test(x,y,method = "pearson")
output$Cor=c(output$Cor,res$p.value);
output$Rstat = c(output$Rstat,res$statistic);
output$Rsig=c(output$Rsig,as.numeric(res$p.value<0.05))
output$R_only_sig=abs(output$Rstat[output$Rsig==1])
output$R_only_sig_check=output$Cor[output$Rsig==1]
A = y[x<M]
B= y[x>=M]
TT=t.test(A,B,paired=FALSE)
output$Tp=c(output$Tp,TT$p.value)
output$Tstat=c(output$Tstat,TT$statistic)
output$Tsig=c(output$Tsig,as.numeric(TT$p.value<0.05))
output$T_only_sig=abs(output$Tstat[output$Tsig==1])
output$T_only_sig_check=output$Tp[output$Tsig==1]
}
dat <- data.frame(Corp = output$Cor,
Ttp = output$Tp,
CorT = output$Rstat,
TtT = output$Tstat,
Tsig = as.factor(output$Tsig),
Rsig = as.factor(output$Rsig));
p <- ggplot(dat, aes(x=Corp, y=Ttp)) +
geom_point(shape=1) +    # Use hollow circles
#geom_smooth(method=lm,se=FALSE) +   # Add linear regression line
geom_abline(intercept = 0, slope = 1, colour='red', size=1)+
xlab("p-value correlation") +
ylab("p-value Ttes") +
ggtitle("p-values") +
theme(aspect.ratio=1)+
xlim(0, 1)+
ylim(0, 1)+
geom_hline(yintercept=0.05, color='green', size=1)+
geom_vline(xintercept=0.05, color='green', size=1);
#  (by default includes 95% confidence region)
plot_Pval[[i]] <-p;
p <-ggplot(dat, aes(x=abs(CorT), y=abs(TtT))) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm,se=FALSE, size=1) +   # Add linear regression line
geom_abline(intercept = 0, slope = 1, colour='red', size=1)+
theme(aspect.ratio=1)+
xlab("t-value for the correlation") +
ylab("t-value for median split")+
ggtitle("t-statistics");
plot_Tval[[i]] <-p;
l <- list(output$T_only_sig, output$R_only_sig);
OnlySig <- data.frame(lapply(l, `length<-`, max(lengths(l))))
colnames (OnlySig) <- c("T", "R")
Xmat=as.factor(c(rep(1,length(OnlySig$T)),rep(2,length(OnlySig$R))))
Ymat <- c(OnlySig$T,OnlySig$R);
M <- tapply(Ymat, Xmat, mean)
PlotSig <- data.frame(Xm=Xmat,Ym=Ymat)
p <- ggplot(PlotSig, aes(x=Xm,y = Ym,fill=Xm)) +
geom_boxplot(coef=1e30)+
geom_point(aes(x=Xm,y=Ym,fill = Xm), size = 2, shape = 21, position = position_jitterdodge()) +
scale_fill_manual(values=c('#999999','#E69F00'),guide=FALSE)+
scale_x_discrete(labels=c("1" = "Med.Split","2" = "Corr"))+
theme(axis.title.x=element_blank(),axis.title.y=element_blank())+
ggtitle("average t-value when significant");
plot_box[[i]] <-p;
}
multiplot(plot_box)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(plot_box)
plot_box
library(ggplot2)
n=16;
mean = 0;
deltamean=1;
sd=.1;
output <- list()
link = c(0, 0.1, 0.7)
plot_Pval = list()
plot_Tval = list()
plot_box = list()
for (i in 1:3) {
for (k in 1:10) {
x <- rnorm(n, mean, sd)
y <- rnorm(n, mean, sd)
SL = link[i]
y <- y+SL*x
M <- median(x)
res <- cor.test(x,y,method = "pearson")
output$Cor=c(output$Cor,res$p.value);
output$Rstat = c(output$Rstat,res$statistic);
output$Rsig=c(output$Rsig,as.numeric(res$p.value<0.05))
output$R_only_sig=abs(output$Rstat[output$Rsig==1])
output$R_only_sig_check=output$Cor[output$Rsig==1]
A = y[x<M]
B= y[x>=M]
TT=t.test(A,B,paired=FALSE)
output$Tp=c(output$Tp,TT$p.value)
output$Tstat=c(output$Tstat,TT$statistic)
output$Tsig=c(output$Tsig,as.numeric(TT$p.value<0.05))
output$T_only_sig=abs(output$Tstat[output$Tsig==1])
output$T_only_sig_check=output$Tp[output$Tsig==1]
}
dat <- data.frame(Corp = output$Cor,
Ttp = output$Tp,
CorT = output$Rstat,
TtT = output$Tstat,
Tsig = as.factor(output$Tsig),
Rsig = as.factor(output$Rsig));
p <- ggplot(dat, aes(x=Corp, y=Ttp)) +
geom_point(shape=1) +    # Use hollow circles
#geom_smooth(method=lm,se=FALSE) +   # Add linear regression line
geom_abline(intercept = 0, slope = 1, colour='red', size=1)+
xlab("p-value correlation") +
ylab("p-value Ttes") +
ggtitle("p-values") +
theme(aspect.ratio=1)+
xlim(0, 1)+
ylim(0, 1)+
geom_hline(yintercept=0.05, color='green', size=1)+
geom_vline(xintercept=0.05, color='green', size=1);
#  (by default includes 95% confidence region)
plot_Pval[[i]] <-p;
p <-ggplot(dat, aes(x=abs(CorT), y=abs(TtT))) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm,se=FALSE, size=1) +   # Add linear regression line
geom_abline(intercept = 0, slope = 1, colour='red', size=1)+
theme(aspect.ratio=1)+
xlab("t-value for the correlation") +
ylab("t-value for median split")+
ggtitle("t-statistics");
plot_Tval[[i]] <-p;
l <- list(output$T_only_sig, output$R_only_sig);
OnlySig <- data.frame(lapply(l, `length<-`, max(lengths(l))))
colnames (OnlySig) <- c("T", "R")
Xmat=as.factor(c(rep(1,length(OnlySig$T)),rep(2,length(OnlySig$R))))
Ymat <- c(OnlySig$T,OnlySig$R);
M <- tapply(Ymat, Xmat, mean)
PlotSig <- data.frame(Xm=Xmat,Ym=Ymat)
p <- ggplot(PlotSig, aes(x=Xm,y = Ym,fill=Xm)) +
geom_boxplot(coef=1e30)+
geom_point(aes(x=Xm,y=Ym,fill = Xm), size = 2, shape = 21, position = position_jitterdodge()) +
scale_fill_manual(values=c('#999999','#E69F00'),guide=FALSE)+
scale_x_discrete(labels=c("1" = "Med.Split","2" = "Corr"))+
theme(axis.title.x=element_blank(),axis.title.y=element_blank())+
ggtitle("average t-value when significant");
plot_box[[i]] <-p;
}
multiplot(plot_box)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
plotbox
plot_box
multiplot(plot_box[[1]],plot_box[[2]],plot_box[[3]])
multiplot(plot_box[[1]],plot_box[[2]],plot_box[[3]],cols=3)
multiplot(plot_Rval[[1]],plot_Rval[[2]],plot_Rval[[3]],cols=3)
multiplot(plot_Tval[[1]],plot_Tval[[2]],plot_Tval[[3]],cols=3)
multiplot(plot_box[[1]],plot_box[[2]],plot_box[[3]],cols=3)
multiplot(plot_Pval[[1]],plot_Pval[[2]],plot_Pval[[3]],cols=3)
multiplot(plot_Tval[[1]],plot_Tval[[2]],plot_Tval[[3]],cols=3)
multiplot(plot_box[[1]],plot_box[[2]],plot_box[[3]],cols=3)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
library(ggplot2)
n=16;
mean = 0;
deltamean=1;
sd=.1;
output <- list()
link = c(0, 0.1, 0.7)
plot_Pval = list()
plot_Tval = list()
plot_box = list()
for (i in 1:3) {
for (k in 1:100) {
x <- rnorm(n, mean, sd)
y <- rnorm(n, mean, sd)
SL = link[i]
y <- y+SL*x
M <- median(x)
res <- cor.test(x,y,method = "pearson")
output$Cor=c(output$Cor,res$p.value);
output$Rstat = c(output$Rstat,res$statistic);
output$Rsig=c(output$Rsig,as.numeric(res$p.value<0.05))
output$R_only_sig=abs(output$Rstat[output$Rsig==1])
output$R_only_sig_check=output$Cor[output$Rsig==1]
A = y[x<M]
B= y[x>=M]
TT=t.test(A,B,paired=FALSE)
output$Tp=c(output$Tp,TT$p.value)
output$Tstat=c(output$Tstat,TT$statistic)
output$Tsig=c(output$Tsig,as.numeric(TT$p.value<0.05))
output$T_only_sig=abs(output$Tstat[output$Tsig==1])
output$T_only_sig_check=output$Tp[output$Tsig==1]
}
dat <- data.frame(Corp = output$Cor,
Ttp = output$Tp,
CorT = output$Rstat,
TtT = output$Tstat,
Tsig = as.factor(output$Tsig),
Rsig = as.factor(output$Rsig));
p <- ggplot(dat, aes(x=Corp, y=Ttp)) +
geom_point(shape=1) +    # Use hollow circles
#geom_smooth(method=lm,se=FALSE) +   # Add linear regression line
geom_abline(intercept = 0, slope = 1, colour='red', size=1)+
xlab("p-value correlation") +
ylab("p-value Ttes") +
ggtitle("p-values") +
theme(aspect.ratio=1)+
xlim(0, 1)+
ylim(0, 1)+
geom_hline(yintercept=0.05, color='green', size=1)+
geom_vline(xintercept=0.05, color='green', size=1);
#  (by default includes 95% confidence region)
plot_Pval[[i]] <-p;
p <-ggplot(dat, aes(x=abs(CorT), y=abs(TtT))) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm,se=FALSE, size=1) +   # Add linear regression line
geom_abline(intercept = 0, slope = 1, colour='red', size=1)+
theme(aspect.ratio=1)+
xlab("t-value for the correlation") +
ylab("t-value for median split")+
ggtitle("t-statistics");
plot_Tval[[i]] <-p;
l <- list(output$T_only_sig, output$R_only_sig);
OnlySig <- data.frame(lapply(l, `length<-`, max(lengths(l))))
colnames (OnlySig) <- c("T", "R")
Xmat=as.factor(c(rep(1,length(OnlySig$T)),rep(2,length(OnlySig$R))))
Ymat <- c(OnlySig$T,OnlySig$R);
M <- tapply(Ymat, Xmat, mean)
PlotSig <- data.frame(Xm=Xmat,Ym=Ymat)
p <- ggplot(PlotSig, aes(x=Xm,y = Ym,fill=Xm)) +
geom_boxplot(coef=1e30)+
geom_point(aes(x=Xm,y=Ym,fill = Xm), size = 2, shape = 21, position = position_jitterdodge()) +
scale_fill_manual(values=c('#999999','#E69F00'),guide=FALSE)+
scale_x_discrete(labels=c("1" = "Med.Split","2" = "Corr"))+
theme(axis.title.x=element_blank(),axis.title.y=element_blank())+
ggtitle("average t-value when significant");
plot_box[[i]] <-p;
}
multiplot(plot_Pval[[1]],plot_Pval[[2]],plot_Pval[[3]],cols=3)
multiplot(plot_Tval[[1]],plot_Tval[[2]],plot_Tval[[3]],cols=3)
multiplot(plot_box[[1]],plot_box[[2]],plot_box[[3]],cols=3)
cos(0)
cos(90)
cosd(90)
0.55*cos(10*pi/180)
0.357*0.54
(0.19*0.584+0.84*0.314)/(0.584+0.314)
0.898*55*9.81
0.102*55*9.81
0.55*sin(10*pi/180)
0.75*sin(15*pi/180)-0.0955
-0.75*sin(15*pi/180)-0.0955
-0.75*cos(15*pi/180)-0.54
0.5*cos(70*pi/180)
0.5*sin(70*pi/180)
0.59*484.51+0.08*55
55*9.81/(2*cos(25*pi/180))
cospi(90)
290.26-1.43*297.66*cos(65*pi/180)+0.17*297.66*sin(65*pi/180)
290.26-1.43*297.66*sin(65*pi/180)+0.17*297.66*cos(65*pi/180)
290.26-1.43*297.66*sin(45*pi/180)+0.17*297.66*cos(45*pi/180)
290.26-1.43*297.66*sin(50*pi/180)+0.17*297.66*cos(50*pi/180)
290.26-1.43*297.66*sin(49*pi/180)+0.17*297.66*cos(49*pi/180)
290.26-1.43*297.66*sin(49.5*pi/180)+0.17*297.66*cos(49.5*pi/180)
297.66*cos(49.5*pi/180)
-297.66*sin(49.5*pi/180)+55*9.81
0.09*55-0.17*313-0.47*193
484.5-258
297.66*sin(49.5*pi/180)
139+0.42*484.5-0.29*193-1.26*226.5
(0.584*0.35+0.102*0.634)/0.686
0.643*0.096
(0.584*0.06+0.102*(-0.15)/0.686
(0.584*0.06+0.102*(-0.15)/0.686
0
(0.584*0.06+0.102*(-0.15))/0.686
-7*0.025-0.25+0.25*2.5
0.25/0.05
0.043*65
2.8*9.96+650
0.567*0.59
sqrt(0.01^2+0.059^2)
sqrt(0.1^2+0.059^2)
sqrt(sq(0.1)+sq(0.059)
)
0.1^2
sqrt((0.1^2)+(0.059^2))
sqrt((0.1^2)+(0.59^2))
2.8*(0.1818^2)
0.093*5-40+0.26*95-0.0433*650-0.0567*677.9-0.33*(-97.8)
install.packages("rmarkdown", type = "source")
dir
ls
list
cleqr
clear
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:\Users\dropbox\Documents\Dropbox (Personal)\website")
#render your sweet site.
rmarkdown::render_site()
setwd("C:/Users/dropbox/Documents/Dropbox (Personal)/website")
rmarkdown::render_site()
rmarkdown::render_site()
